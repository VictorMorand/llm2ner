id: llm2ner_TM_Debug          #id of the experiment
title: "Training"
description: "Training a custom low rank self attention layer to extract NER skills from LLMs"
# add_timestamp: true
file: xp_learnTokenMatching
pythonpath: 
    - .././

# General parameters
# -  "gpt2-medium" # 24 (0-23) Transformer layers 
# -  "meta-llama/Llama-3.2-1B"  # 16 layers 1.1B
# -  "mistral-7b"  # 7B
# -  "phi-2" # 32 (0-31) Transformer layers | ok 32G with batch 32
# -  "phi-1_5" # 24 (0-23) Transformer layers | 
# -  "meta-llama/Llama-3.2-3B" # 28 layers 3.2 B
# -  "EleutherAI/pythia-410m" # 28 layers 3.2 B
# -  "answerdotai/ModernBERT-base"  # 16 layers 1.1B
model_names: 
 - "meta-llama/Llama-3.2-1B"  # 16 layers 1.1B


launcher: "duration=15h & cuda(mem=15G)*1 & cpu(cores=4)"


###############  Dataset ###############

dataset_name: "MultiNERD" # need to define the data folder
# dataset_name: "Pile-NER" # need to define the data folder
# dataset_name: "CoNLL2003"
data_folder: "/lustre/fswork/projects/rech/cdt/uqo57sk/data/NER" # on JZ
# data_folder: "/data/morand/NER" # on hacienda
max_length: 1500    # max TOKEN length of the input sequence
max_ent_length: 400 # max CHAR length of the entity

############### Training ###############

epochs: 1                   # number of epochs
batch_size: 8               # batch size
lr: 5e-3                    # learning rate 
patience: 500               # patience for lr scheduler
n_val: 5000                 # number of samples between validation and logging
accumulation_steps: 5       # 1 for no accumulation
grad_clip: 0.0              # 0 for no clipping
val_metric: "f1"            # metric to use for validation


self_distillation_phases: 1
sparse_distill_loss: true
teacher_thr_prob: 0.8

############### Model ###############

rank: 32
sliding_window: 25
layers:                     # will extract Q and K from layer [range( l-n: l ) for l in range( from : to )]
    from: 2
    to: 2

use_cosine: true
normalize_scores: ""    # atan , log_sigmoid


methods:                    # Aggregation methods, see models.METHODS
    - "cl_fn_minmaxpool"   
    # - "cl_first_next_pool"   
    # - "cl_first_next_minpool"  
    # - "cl_first_next_mean"   
    # - "cl_first_mean"   
    # - "cl_prev_first_mean"   
    # - "inter_first"   
    # - "inter_first_soft"   
    # - "inter_first_neg"   


dilate_entities:         # train only on entities, 
    - null               
    # - [3]      
    # - [2,2]                 


############### Evaluation ###############

eval_datasets:
    - "CoNLL 2003"
    - "CrossNER_politics"
    - "CrossNER_science"
    - "ncbi"


############### LLM Annotation ###############
annot_names:
 - "llama3.2:3b"

limit_samples: 100